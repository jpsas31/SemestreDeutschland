import torch
import math

x = torch.linspace(-math.pi,math.pi,2000)
y = torch.sin(x)

p = torch.tensor([1,2,3])
xx = x.unsqueeze(-1).pow(p)

model = torch.nn.Sequential(
    torch.nn.Linear(3,1),
    torch.nn.Flatten(0,1)
)

learning_rate = 1e-6

loss_func = torch.nn.MSELoss(reduction='sum')

optimiser = torch.optim.RMSprop(model.parameters(),lr = learning_rate)  # optim

for t in range(2000):
    y_pred = model(xx)

    loss = loss_func(y_pred,y)

    if t%100 == 99:
        print(t,loss.item())
    
    optimiser.zero_grad()    # This is because by default, gradients are accumulated in buffers

    loss.backward()

    optimiser.step()       # updates the learnable params

linear_layer = model[0]

print(f'a is : {linear_layer.bias.item()}+{linear_layer.weight[:,0].item()}')
